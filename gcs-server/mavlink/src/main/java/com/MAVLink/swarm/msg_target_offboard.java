/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE TARGET_OFFBOARD PACKING
package com.MAVLink.swarm;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * target_offboard
 */
public class msg_target_offboard extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_TARGET_OFFBOARD = 183;
    public static final int MAVLINK_MSG_LENGTH = 28;
    private static final long serialVersionUID = MAVLINK_MSG_ID_TARGET_OFFBOARD;

    
    /**
     * Timestamp in milliseconds since system boot
     */
    @Description("Timestamp in milliseconds since system boot")
    @Units("")
    public long time_boot_ms;
    
    /**
     * target pos x
     */
    @Description("target pos x")
    @Units("")
    public float pos_x;
    
    /**
     * target pos y
     */
    @Description("target pos y")
    @Units("")
    public float pos_y;
    
    /**
     * target pos z
     */
    @Description("target pos z")
    @Units("")
    public float pos_z;
    
    /**
     * target heading
     */
    @Description("target heading")
    @Units("")
    public float head;
    
    /**
     * System ID
     */
    @Description("System ID")
    @Units("")
    public short target_system;
    
    /**
     * Component ID
     */
    @Description("Component ID")
    @Units("")
    public short target_component;
    
    /**
     * display shape
     */
    @Description("display shape")
    @Units("")
    public short led_type;
    
    /**
     * display speed
     */
    @Description("display speed")
    @Units("")
    public short led_speed;
    
    /**
     * red value (0~256)
     */
    @Description("red value (0~256)")
    @Units("")
    public short led_r;
    
    /**
     * green value (0~256)
     */
    @Description("green value (0~256)")
    @Units("")
    public short led_g;
    
    /**
     * blue value (0~256)
     */
    @Description("blue value (0~256)")
    @Units("")
    public short led_b;
    
    /**
     * brightness
     */
    @Description("brightness")
    @Units("")
    public short led_bright;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_TARGET_OFFBOARD;

        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(pos_x);
        packet.payload.putFloat(pos_y);
        packet.payload.putFloat(pos_z);
        packet.payload.putFloat(head);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(led_type);
        packet.payload.putUnsignedByte(led_speed);
        packet.payload.putUnsignedByte(led_r);
        packet.payload.putUnsignedByte(led_g);
        packet.payload.putUnsignedByte(led_b);
        packet.payload.putUnsignedByte(led_bright);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a target_offboard message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_boot_ms = payload.getUnsignedInt();
        this.pos_x = payload.getFloat();
        this.pos_y = payload.getFloat();
        this.pos_z = payload.getFloat();
        this.head = payload.getFloat();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.led_type = payload.getUnsignedByte();
        this.led_speed = payload.getUnsignedByte();
        this.led_r = payload.getUnsignedByte();
        this.led_g = payload.getUnsignedByte();
        this.led_b = payload.getUnsignedByte();
        this.led_bright = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_target_offboard() {
        this.msgid = MAVLINK_MSG_ID_TARGET_OFFBOARD;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_target_offboard( long time_boot_ms, float pos_x, float pos_y, float pos_z, float head, short target_system, short target_component, short led_type, short led_speed, short led_r, short led_g, short led_b, short led_bright) {
        this.msgid = MAVLINK_MSG_ID_TARGET_OFFBOARD;

        this.time_boot_ms = time_boot_ms;
        this.pos_x = pos_x;
        this.pos_y = pos_y;
        this.pos_z = pos_z;
        this.head = head;
        this.target_system = target_system;
        this.target_component = target_component;
        this.led_type = led_type;
        this.led_speed = led_speed;
        this.led_r = led_r;
        this.led_g = led_g;
        this.led_b = led_b;
        this.led_bright = led_bright;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_target_offboard( long time_boot_ms, float pos_x, float pos_y, float pos_z, float head, short target_system, short target_component, short led_type, short led_speed, short led_r, short led_g, short led_b, short led_bright, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_TARGET_OFFBOARD;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.pos_x = pos_x;
        this.pos_y = pos_y;
        this.pos_z = pos_z;
        this.head = head;
        this.target_system = target_system;
        this.target_component = target_component;
        this.led_type = led_type;
        this.led_speed = led_speed;
        this.led_r = led_r;
        this.led_g = led_g;
        this.led_b = led_b;
        this.led_bright = led_bright;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_target_offboard(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_TARGET_OFFBOARD;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_TARGET_OFFBOARD - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" pos_x:"+pos_x+" pos_y:"+pos_y+" pos_z:"+pos_z+" head:"+head+" target_system:"+target_system+" target_component:"+target_component+" led_type:"+led_type+" led_speed:"+led_speed+" led_r:"+led_r+" led_g:"+led_g+" led_b:"+led_b+" led_bright:"+led_bright+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_TARGET_OFFBOARD";
    }
}
        